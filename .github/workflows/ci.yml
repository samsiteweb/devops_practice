name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  ACCESSMNGT_CHART_PATH: ./deploy/helm/charts/accessmanagement/Chart.yaml
  REQUESTMNGT_CHART_PATH: ./deploy/helm/charts/requestmanagement/Chart.yaml
  AZURE_REGISTRY_HELM_PATH: helm

jobs:
  build-and-test:
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore SemanixBackend/SemanixBackend.sln

    - name: Build
      run: dotnet build SemanixBackend/SemanixBackend.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test SemanixBackend/SemanixBackend.sln --configuration Release --no-build

  build-and-push-docker:
    needs: build-and-test
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Build and push AccessManagement API
      uses: docker/build-push-action@v4
      with:
        context: ./SemanixBackend
        file: ./SemanixBackend/src/Services/AccessManagement/AccessManagement.Api/Dockerfile
        push: true
        tags: |
          ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/accessmanagementapi:latest

    - name: Build and push RequestManagement API
      uses: docker/build-push-action@v4
      with:
        context: ./SemanixBackend
        file: ./SemanixBackend/src/Services/RequestManagement/RequestManagement.Api/Dockerfile
        push: true
        tags: |
          ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/requestmanagementapi:latest

  update-helm-charts:
    needs: build-and-push-docker
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.11.0'

    - name: Read Helm Chart Versions
      id: read_versions
      run: |
        echo "ACCESSMNGT_VERSION=$(grep '^version:' $ACCESSMNGT_CHART_PATH | awk '{print $2}')" >> $GITHUB_ENV
        echo "REQUESTMNGT_VERSION=$(grep '^version:' $REQUESTMNGT_CHART_PATH | awk '{print $2}')" >> $GITHUB_ENV

    - name: Package Helm charts
      run: |
        helm package ./deploy/helm/charts/accessmanagement -d ./deploy/helm/releases
        helm package ./deploy/helm/charts/requestmanagement -d ./deploy/helm/releases

    - name: Login to Helm OCI Registry
      run: helm registry login ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io --username ${{ secrets.AZURE_REGISTRY_USERNAME }} --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Push Helm charts
      run: |
        helm push ./deploy/helm/releases/accessmanagement-${ACCESSMNGT_VERSION}.tgz oci://${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/${AZURE_REGISTRY_HELM_PATH}
        helm push ./deploy/helm/releases/requestmanagement-${REQUESTMNGT_VERSION}.tgz oci://${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/${AZURE_REGISTRY_HELM_PATH}

    - name: Commit Helm chart release packages
      env:
        REPO_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./deploy/helm/releases
        git commit -m "Update Helm charts" || echo "No changes to commit"
        git remote set-url origin https://x-access-token:${REPO_TOKEN}@github.com/${{ github.repository }}
        git push

  sync-argocd:
    needs: [update-helm-charts]
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Argo CD CLI
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin

    - name: Argo CD Login
      run: |
        sudo argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

    - name: Create and Sync Applications
      run: |
        export AZURE_REGISTRY_NAME=${{ secrets.AZURE_REGISTRY_NAME }}
        export ACCESSMNGT_VERSION=${{ env.ACCESSMNGT_VERSION }}
        export REQUESTMNGT_VERSION=${{ env.REQUESTMNGT_VERSION }}
        
        envsubst < ./deploy/k8s/argocd/accessmanagement-app.yaml > accessmanagement-app-final.yaml
        envsubst < ./deploy/k8s/argocd/requestmanagement-app.yaml > requestmanagement-app-final.yaml

        sudo argocd app create -f accessmanagement-app-final.yaml --upsert
        sudo argocd app create -f requestmanagement-app-final.yaml --upsert
        
        sudo argocd app sync semanix-backend-accessmanagement
        sudo argocd app wait semanix-backend-accessmanagement --health --timeout 180

        sudo argocd app sync semanix-backend-requestmanagement
        sudo argocd app wait semanix-backend-requestmanagement --health --timeout 180
