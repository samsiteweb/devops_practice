name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add explicit permissions for GITHUB_TOKEN
permissions:
  contents: write
  packages: write

jobs:
  build-and-test:
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore SemanixBackend/SemanixBackend.sln

    - name: Build
      run: dotnet build SemanixBackend/SemanixBackend.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test SemanixBackend/SemanixBackend.sln --configuration Release --no-build

    # - name: SonarQube Scan
    #   uses: SonarSource/sonarcloud-github-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   with:
    #     args: >
    #       -Dsonar.projectKey=semantixbackend
    #       -Dsonar.organization=semantixbackend

  build-and-push-docker:
    needs: build-and-test
    runs-on: [self-hosted, azure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Build and push AccessManagement API
      uses: docker/build-push-action@v4
      with:
        context: ./SemanixBackend
        file: ./SemanixBackend/src/Services/AccessManagement/AccessManagement.Api/Dockerfile
        push: true
        tags: |
          ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/accessmanagementapi:latest

    - name: Build and push RequestManagement API
      uses: docker/build-push-action@v4
      with:
        context: ./SemanixBackend
        file: ./SemanixBackend/src/Services/RequestManagement/RequestManagement.Api/Dockerfile
        push: true
        tags: |
          ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/requestmanagementapi:latest

    # Security scan both service images in parallel via matrix
  scan-images:
    needs: build-and-push-docker
    runs-on: [self-hosted, azure]
    strategy:
      matrix:
        service: [accessmanagementapi, requestmanagementapi]
    steps:
    - name: Login to ACR
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
    - name: Pull ${{ matrix.service }} image locally
      run: docker pull ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/${{ matrix.service }}:latest
    - name: Scan ${{ matrix.service }} image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-results.sarif'

  update-helm-charts:
    needs: scan-images
    runs-on: [self-hosted, azure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.11.0'

    - name: Package Helm charts
      run: |
        helm package ./deploy/helm/charts/accessmanagement -d ./deploy/helm/releases
        helm package ./deploy/helm/charts/requestmanagement -d ./deploy/helm/releases

    - name: Login to ACR with Docker
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Login to Helm OCI Registry
      run: helm registry login ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io --username ${{ secrets.AZURE_REGISTRY_USERNAME }} --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Push Helm charts to ACR OCI registry
      run: |
        helm push ./deploy/helm/releases/accessmanagement-*.tgz oci://${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/helm
        helm push ./deploy/helm/releases/requestmanagement-*.tgz oci://${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/helm

    - name: Commit and push changes
      env:
        REPO_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./deploy/helm/releases
        git commit -m "Update Helm charts" || echo "No changes to commit"
        # Use authenticated HTTPS URL for push
        git remote set-url origin https://x-access-token:${REPO_TOKEN}@github.com/${{ github.repository }}
        git push

  sync-argocd:
    needs: update-helm-charts
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Install Argo CD CLI
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin

    - name: Argo CD Login
      run: |
        sudo argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

    - name: Add Helm Repository to ArgoCD
      run: |
        sudo argocd repo add ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/helm \
          --type helm \
          --name azure-helm \
          --enable-oci \
          --username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
          --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}


    - name: Create and Sync Argo CD Application
      run: |
        # Create the application using Helm chart from registry
        sudo argocd app create semanix-backend \
          --repo ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/helm \
          --helm-chart accessmanagement \
          --revision 0.1.0 \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace semanix \
          --upsert
        
        # Sync the application after creating it
        sudo argocd app sync semanix-backend
        sudo argocd app wait semanix-backend --health --timeout 120