name: Microservice CI/CD Template

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      docker_context:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      helm_chart_path:
        required: true
        type: string
      helm_chart_name:
        required: true
        type: string
      argocd_app_file:
        required: true
        type: string
    secrets:
      AZURE_REGISTRY_NAME:
        required: true
      AZURE_REGISTRY_USERNAME:
        required: true
      AZURE_REGISTRY_PASSWORD:
        required: true
      REPO_ACCESS_TOKEN:
        required: true
      ARGOCD_SERVER:
        required: true
      ARGOCD_USER:
        required: true
      ARGOCD_PASSWORD:
        required: true

env:
  AZURE_REGISTRY_HELM_PATH: helm

jobs:
  setup:
    runs-on: [self-hosted, azure]
    outputs:
      chart_version: ${{ steps.read_version.outputs.chart_version }}
      docker_tag: ${{ steps.set_docker_tag.outputs.docker_tag }}
    steps:
    - uses: actions/checkout@v3

    - id: read_version
      run: |
        echo "chart_version=$(grep '^version:' ${{ inputs.helm_chart_path }}/Chart.yaml | awk '{print $2}')" >> $GITHUB_OUTPUT

    - id: set_docker_tag
      run: |
        DOCKER_TAG=$(echo "${GITHUB_SHA}" | cut -c1-7)
        echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT

  build-and-push:
    needs: setup
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker Login
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Build and Push Image
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.docker_context }}
        file: ${{ inputs.dockerfile_path }}
        push: true
        tags: |
          ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/${{ inputs.service_name }}api:${{ needs.setup.outputs.docker_tag }}

  update-helm:
    needs: [setup, build-and-push]
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.11.0'

    - name: Login to Helm OCI Registry
      run: helm registry login ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io --username ${{ secrets.AZURE_REGISTRY_USERNAME }} --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Package and Push Helm chart
      run: |
        helm package ${{ inputs.helm_chart_path }} -d ./deploy/helm/releases
        helm push ./deploy/helm/releases/${{ inputs.helm_chart_name }}-${{ needs.setup.outputs.chart_version }}.tgz oci://${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/${{ env.AZURE_REGISTRY_HELM_PATH }}

    - name: Commit updated Helm values.yaml
      env:
        REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ inputs.helm_chart_path }}/values.yaml
        git commit -m "chore: update Docker image tag for ${{ inputs.service_name }}" || echo "No changes to commit"
        git remote set-url origin https://x-access-token:${REPO_ACCESS_TOKEN}@github.com/${{ github.repository }}
        git push

  sync-argocd:
    needs: [setup, update-helm]
    runs-on: [self-hosted, azure]
    steps:
    - uses: actions/checkout@v3

    - name: Install Argo CD CLI
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin

    - name: ArgoCD Login
      run: |
        sudo argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

    - name: Sync ArgoCD Application
      run: |
        export AZURE_REGISTRY_NAME=${{ secrets.AZURE_REGISTRY_NAME }}
        export CHART_VERSION=${{ needs.setup.outputs.chart_version }}
        export DOCKER_TAG=${{ needs.setup.outputs.docker_tag }}

        envsubst '${AZURE_REGISTRY_NAME} ${CHART_VERSION} ${DOCKER_TAG}' < ./deploy/k8s/argocd/accessmanagement-app.yaml > app-final.yaml

        sudo argocd app create -f app-final.yaml --upsert

        if ! sudo argocd app diff semanix-backend-${{ inputs.service_name }}; then
          echo "Changes detected, syncing..."
          sudo argocd app sync semanix-backend-${{ inputs.service_name }}
          sudo argocd app wait semanix-backend-${{ inputs.service_name }} --health --timeout 180
        else
          echo "No changes detected, skipping sync."
        fi
